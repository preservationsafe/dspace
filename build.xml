<project name="CampusRepo" basedir="." default="help">
    <property name="installer.dir" value="dspace/target/dspace-installer" />
    <property file="build.properties" />
    <property name="dspace.version" value="dspace-6.2"/>
    <property name="dspace-src.url" value="https://github.com/DSpace/DSpace/releases/download/${dspace.version}/${dspace.version}-src-release.tar.gz"/>
    <property name="maven.options" value=" -P !dspace-xmlui-mirage2,!dspace-xmlui,!dspace-rdf,!dspace-rest,!dspace-sword,!dspace-swordv2,!dspace-oai" />

    <!-- List main targets. -->
    <target name="help">
        <java classname="org.apache.tools.ant.Main">
            <arg value="-projecthelp" />
            <arg value="-buildfile" />
            <arg value="${ant.file}" />
        </java>
    </target>

    <!--
        Use this target for the initial build of dspace. This runs mvn package from the root of the project
        and runs ant fresh_install from the dspace-installer directory.
    -->
    <target name="build_init" description="Build the first time.">
        <antcall target="copy_local_config" />
        <antcall target="mvn_clean_package" />
        <antcall target="ant_fresh" />
    </target>

    <!--
        This target will work for deploying (locally) most updates to dspace. It runs mvn package from the
        [dspace-source]/dspace directory and runs ant update from the dspace-installer directory. From Dspace
        Documentation: This option performs a "quick build". It does not recompile/rebuild all DSpace modules.
        All it does is rebuild and re-apply any Maven WAR Overlays to the previously compiled source code.
        In other words, the ONLY code that will be recompiled/rebuilt is code that exists in
        [dspace-source]/dspace/modules/* (the Maven WAR Overlay directories)
    -->
    <target name="build_quick" description="Reapply overlays. This should work for seeing most changes.">
        <antcall target="copy_local_config" />
        <antcall target="mvn_package_quick" />
        <antcall target="ant_update" />
    </target>

    <!--
        This will run mvn package from the root of the project ([dspace-source]). From Dspace Documentation: This
        will rebuild all DSpace modules from their Java Source code, then apply any Maven WAR Overlays. In other
        words, all subdirectories of [dspace-source] are recompiled/rebuilt.
    -->
    <target name="build_full" description="Rebuild from source if you have it, then reapply overlays.">
        <antcall target="copy_local_config" />
        <antcall target="mvn_package_full" />
        <antcall target="ant_update" />
    </target>

    <!--
        This is similar to build_full, except it will run mvn clean package from [dspace-source] directory.
        The Maven clean plug-in "attempts to clean a project's working directory of the files that we're generated
        at build-time."
    -->
    <target name="build_clean" description=
            "Rebuild everything, switching to using source if you just downloaded it. Useful for setting breakpoints.">
        <antcall target="copy_local_config" />
        <antcall target="mvn_clean_package" />
        <antcall target="ant_update" />
    </target>

    <!-- Running mvn package from the root [dspace-source] directory -->
    <target name="mvn_package_full">
        <exec dir="." executable="sh">
            <arg line="-c 'mvn package ${maven.options}'" />
        </exec>
    </target>

    <!-- Running mvn package from the [dspace-source]/dspace/ directory -->
    <target name="mvn_package_quick">
        <exec dir="dspace" executable="sh">
            <arg line="-c 'mvn package ${maven.options}'" />
        </exec>
    </target>

    <!-- Running mvn clean package from the root [dspace-source] directory -->
    <target name="mvn_clean_package">
        <exec dir="." executable="sh">
            <arg line="-c 'mvn clean package ${maven.options}'" />
        </exec>
    </target>

    <target name="ant_fresh" depends="check_ant_file" if="ant.present">
        <ant dir="${installer.dir}" antfile="build.xml" target="fresh_install" />
    </target>

    <target name="ant_update" depends="check_ant_file" if="ant.present">
        <ant dir="${installer.dir}" antfile="build.xml" target="update">
            <property name="config" value="${dspace_install.dir}/config/dspace.cfg"/>
        </ant>
    </target>

    <!--
        Checks that the ant build.xml file is present in dspace-installer directory before attempting to load the
        targets in that file.
    -->
    <target name="check_ant_file">
        <available file="dspace/target/dspace-installer/build.xml" property="ant.present" />
    </target>

    <target name="copy_local_config" description="Copies local.cfg.EXAMPLE to local.cfg and fileters tokens with values in build.properties.">
        <copy file="dspace/config/local.cfg.EXAMPLE" tofile="dspace/config/local.cfg" filtering="true" overwrite="true">
            <filterset>
                <filter token="DSPACE_DIR" value="${dspace.dir}"/>
                <filter token="DB_URL" value="${db.url}"/>
                <filter token="DB_USER" value="${db.username}"/>
                <filter token="DB_PASSWORD" value="${db.password}"/>
                <filter token="ASSETSTRORE_DIR" value="${assetstore.dir}"/>
            </filterset>
        </copy>
    </target>

    <!--
        This will grab the source files necessary for development. After running this run ant build-clean and the
        project will begin to use the source files you just grabbed as opposed to the cached files in your local
        maven repository. This will allow you to alter those files for testing purposes. All these files will be
        ignored in the git repository so to save changes you will need to copy them to the correct file in
        [dspace-source]/dspace/modules
    -->
    <target name="get_src_files" description="Download the DSpace source so you can set breakpoints.">
        <get src="${dspace-src.url}" dest="." quiet="true" />
        <gunzip src="${dspace.version}-src-release.tar.gz" dest="." />
        <untar src="${dspace.version}-src-release.tar" dest=".">
            <patternset>
                <include name="${dspace.version}-src-release/dspace-*/**" />
            </patternset>
            <globmapper from="${dspace.version}-src-release/*" to="*" />
        </untar>
        <delete>
            <fileset dir="." includes="${dspace.version}-src-release.tar*" />
        </delete>
    </target>

</project>
